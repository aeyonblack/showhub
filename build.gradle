import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// Top-level build file where you can add configuration options common to all sub-projects/modules.

tasks.register('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

apply plugin: "com.github.ben-manes.versions"

buildscript {
    ext {
        buildConfig = [
                'compileSdk': 34,
                'minSdk': 26,
                'targetSdk': 34
        ]
        gradleDependencyUpdate = "0.42.0"
    }
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath libs.android.plugin.gradle
        classpath libs.kotlin.plugin.gradle
        classpath libs.hilt.plugin.gradle
        classpath libs.gradle.dependency.updates
    }
}

/**
 * Target Java 11 for compiling all modules and
 * enable experimental kotlin coroutines
 */
subprojects {
    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "17"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-opt-in=kotlin.Experimental"
        }
    }
}

/**
 * Used to check for the stability of a gradle dependency and
 * whether to accept it or not when performing automatic dependency
 * checks and updates
 */
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

/**
 * Configure the dependency updates task which is executed
 * by the scheduled github actions workflow
 */
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        /*Reject a dependency if it is less stable than the current one*/
        isNonStable(it.candidate.version)
    }
}